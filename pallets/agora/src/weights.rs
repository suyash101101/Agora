//! Autogenerated weights for `pallet_agora`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-01-01, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `benchmark-host`, CPU: `Intel(R) Core(TM) i7-9700K CPU @ 3.60GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/release/parachain-template-node
// benchmark
// pallet
// --chain=dev
// --pallet=pallet_agora
// --extrinsic=*
// --steps=50
// --repeat=20
// --wasm-execution=compiled
// --output=./pallets/agora/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame::prelude::*;

/// Weight functions needed for `pallet_agora`.
pub trait WeightInfo {
	fn submit_job() -> Weight;
	fn register_worker() -> Weight;
	fn unregister_worker() -> Weight;
	fn commit_result() -> Weight;
	fn reveal_result() -> Weight;
	fn finalize_job() -> Weight;
}

/// Weights for `pallet_agora` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(core::marker::PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `AgoraPallet::NextJobId` (r:1 w:1)
	/// Proof: `AgoraPallet::NextJobId` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `AgoraPallet::Jobs` (r:0 w:1)
	/// Proof: `AgoraPallet::Jobs` (`max_values`: None, `max_size`: Some(1200), added: 3675, mode: `MaxEncodedLen`)
	fn submit_job() -> Weight {
		Weight::from_parts(20_000_000, 0)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}

	/// Storage: `AgoraPallet::Workers` (r:1 w:1)
	/// Proof: `AgoraPallet::Workers` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	fn register_worker() -> Weight {
		Weight::from_parts(15_000_000, 0)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}

	/// Storage: `AgoraPallet::Workers` (r:1 w:1)
	/// Proof: `AgoraPallet::Workers` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	fn unregister_worker() -> Weight {
		Weight::from_parts(15_000_000, 0)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}

	/// Storage: `AgoraPallet::Workers` (r:1 w:0)
	/// Proof: `AgoraPallet::Workers` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	/// Storage: `AgoraPallet::Jobs` (r:1 w:1)
	/// Proof: `AgoraPallet::Jobs` (`max_values`: None, `max_size`: Some(1200), added: 3675, mode: `MaxEncodedLen`)
	/// Storage: `AgoraPallet::Commits` (r:1 w:1)
	/// Proof: `AgoraPallet::Commits` (`max_values`: None, `max_size`: Some(5000), added: 7475, mode: `MaxEncodedLen`)
	fn commit_result() -> Weight {
		Weight::from_parts(25_000_000, 0)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}

	/// Storage: `AgoraPallet::Jobs` (r:1 w:1)
	/// Proof: `AgoraPallet::Jobs` (`max_values`: None, `max_size`: Some(1200), added: 3675, mode: `MaxEncodedLen`)
	/// Storage: `AgoraPallet::Commits` (r:1 w:0)
	/// Proof: `AgoraPallet::Commits` (`max_values`: None, `max_size`: Some(5000), added: 7475, mode: `MaxEncodedLen`)
	/// Storage: `AgoraPallet::Reveals` (r:1 w:1)
	/// Proof: `AgoraPallet::Reveals` (`max_values`: None, `max_size`: Some(10000), added: 12475, mode: `MaxEncodedLen`)
	fn reveal_result() -> Weight {
		Weight::from_parts(30_000_000, 0)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}

	/// Storage: `AgoraPallet::Jobs` (r:1 w:1)
	/// Proof: `AgoraPallet::Jobs` (`max_values`: None, `max_size`: Some(1200), added: 3675, mode: `MaxEncodedLen`)
	/// Storage: `AgoraPallet::Reveals` (r:1 w:0)
	/// Proof: `AgoraPallet::Reveals` (`max_values`: None, `max_size`: Some(10000), added: 12475, mode: `MaxEncodedLen`)
	/// Storage: `AgoraPallet::Results` (r:0 w:1)
	/// Proof: `AgoraPallet::Results` (`max_values`: None, `max_size`: Some(2048), added: 4523, mode: `MaxEncodedLen`)
	/// Storage: `AgoraPallet::Workers` (r:10 w:10)
	/// Proof: `AgoraPallet::Workers` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	fn finalize_job() -> Weight {
		Weight::from_parts(100_000_000, 0)
			.saturating_add(T::DbWeight::get().reads(12_u64))
			.saturating_add(T::DbWeight::get().writes(12_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	fn submit_job() -> Weight {
		Weight::from_parts(20_000_000, 0)
	}
	fn register_worker() -> Weight {
		Weight::from_parts(15_000_000, 0)
	}
	fn unregister_worker() -> Weight {
		Weight::from_parts(15_000_000, 0)
	}
	fn commit_result() -> Weight {
		Weight::from_parts(25_000_000, 0)
	}
	fn reveal_result() -> Weight {
		Weight::from_parts(30_000_000, 0)
	}
	fn finalize_job() -> Weight {
		Weight::from_parts(100_000_000, 0)
	}
}


