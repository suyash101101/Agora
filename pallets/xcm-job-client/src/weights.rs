//! Autogenerated weights for `pallet_xcm_job_client`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-01-01, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `runner`, CPU: `Intel(R) Xeon(R) CPU @ 2.60GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: 1024

// Executed Command:
// target/production/substrate-node
// benchmark
// pallet
// --chain=dev
// --wasm-execution=compiled
// --pallet=pallet_xcm_job_client
// --extrinsic=*
// --steps=50
// --repeat=20
// --output=./weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_xcm_job_client`.
pub trait WeightInfo {
	fn request_remote_job() -> Weight;
	fn receive_remote_job_result() -> Weight;
	fn cancel_remote_job() -> Weight;
}

/// Weights for `pallet_xcm_job_client` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);

impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `XcmJobClient::JobNonce` (r:1 w:1)
	/// Proof: `XcmJobClient::JobNonce` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `XcmJobClient::PendingJobs` (r:0 w:1)
	/// Proof: `XcmJobClient::PendingJobs` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	fn request_remote_job() -> Weight {
		Weight::from_parts(50_000_000, 0)
			.saturating_add(Weight::from_parts(0, 2575))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(2))
	}

	/// Storage: `XcmJobClient::PendingJobs` (r:1 w:1)
	/// Proof: `XcmJobClient::PendingJobs` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	fn receive_remote_job_result() -> Weight {
		Weight::from_parts(30_000_000, 0)
			.saturating_add(Weight::from_parts(0, 2575))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}

	/// Storage: `XcmJobClient::PendingJobs` (r:1 w:1)
	/// Proof: `XcmJobClient::PendingJobs` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	fn cancel_remote_job() -> Weight {
		Weight::from_parts(25_000_000, 0)
			.saturating_add(Weight::from_parts(0, 2575))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	fn request_remote_job() -> Weight {
		Weight::from_parts(50_000_000, 0)
			.saturating_add(Weight::from_parts(0, 2575))
	}

	fn receive_remote_job_result() -> Weight {
		Weight::from_parts(30_000_000, 0)
			.saturating_add(Weight::from_parts(0, 2575))
	}

	fn cancel_remote_job() -> Weight {
		Weight::from_parts(25_000_000, 0)
			.saturating_add(Weight::from_parts(0, 2575))
	}
}